/*
 * Copyright (C) 2015 Yann D'Isanto
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.netbeans.modules.mongodb.indexes;

import org.netbeans.modules.mongodb.indexes.Index.Geo2DOptions;

/**
 *
 * @author Yann D'Isanto
 */
public class Geo2DOptionsPanel extends javax.swing.JPanel {

    /**
     * Creates new form Geo2DOptionsPanel
     */
    public Geo2DOptionsPanel() {
        initComponents();
    }

    public Geo2DOptions getGeo2DOptions() {
        Integer bits = bitsCheckBox.isSelected() ? (Integer) bitsSpinner.getValue() : null;
        Double min = minCheckBox.isSelected() ? (Double) minSpinner.getValue() : null;
        Double max = maxCheckBox.isSelected() ? (Double) maxSpinner.getValue() : null;
        return new Geo2DOptions(bits, min, max);
    }
    
    public void setOptions(Geo2DOptions options) {
        Integer bits = options.getBits();
        if(bits != null) {
            bitsCheckBox.setSelected(true);
            bitsSpinner.setValue(bits);
        } else {
            bitsCheckBox.setSelected(false);
        }
        Double min = options.getMin();
        if(min != null) {
            minCheckBox.setSelected(true);
            minSpinner.setValue(min);
        } else {
            minCheckBox.setSelected(false);
        }
        Double max = options.getMax();
        if(max != null) {
            maxCheckBox.setSelected(true);
            maxSpinner.setValue(max);
        } else {
            maxCheckBox.setSelected(false);
        }
    }
    
    void clearOptions() {
        bitsSpinner.setValue(26);
        bitsSpinner.setEnabled(false);
        bitsCheckBox.setSelected(false);
        minSpinner.setValue(-180.0);
        minSpinner.setEnabled(false);
        minCheckBox.setSelected(false);
        maxSpinner.setValue(180.0);
        maxSpinner.setEnabled(false);
        maxCheckBox.setSelected(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bitsCheckBox = new javax.swing.JCheckBox();
        minCheckBox = new javax.swing.JCheckBox();
        maxCheckBox = new javax.swing.JCheckBox();
        bitsSpinner = new javax.swing.JSpinner();
        minSpinner = new javax.swing.JSpinner();
        maxSpinner = new javax.swing.JSpinner();

        org.openide.awt.Mnemonics.setLocalizedText(bitsCheckBox, org.openide.util.NbBundle.getMessage(Geo2DOptionsPanel.class, "Geo2DOptionsPanel.bitsCheckBox.text")); // NOI18N
        bitsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bitsCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(minCheckBox, org.openide.util.NbBundle.getMessage(Geo2DOptionsPanel.class, "Geo2DOptionsPanel.minCheckBox.text")); // NOI18N
        minCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minCheckBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(maxCheckBox, org.openide.util.NbBundle.getMessage(Geo2DOptionsPanel.class, "Geo2DOptionsPanel.maxCheckBox.text")); // NOI18N
        maxCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxCheckBoxActionPerformed(evt);
            }
        });

        bitsSpinner.setModel(new javax.swing.SpinnerNumberModel(26, 1, 32, 1));
        bitsSpinner.setEnabled(false);

        minSpinner.setModel(new javax.swing.SpinnerNumberModel(-180.0d, -180.0d, 180.0d, 0.1d));
        minSpinner.setEnabled(false);

        maxSpinner.setModel(new javax.swing.SpinnerNumberModel(180.0d, -180.0d, 180.0d, 0.1d));
        maxSpinner.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bitsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bitsSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(maxCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxSpinner))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(minCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minSpinner)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bitsCheckBox)
                    .addComponent(bitsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minCheckBox)
                    .addComponent(minSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxCheckBox)
                    .addComponent(maxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bitsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bitsCheckBoxActionPerformed
        bitsSpinner.setEnabled(bitsCheckBox.isSelected());
    }//GEN-LAST:event_bitsCheckBoxActionPerformed

    private void minCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minCheckBoxActionPerformed
        minSpinner.setEnabled(minCheckBox.isSelected());
    }//GEN-LAST:event_minCheckBoxActionPerformed

    private void maxCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxCheckBoxActionPerformed
        maxSpinner.setEnabled(maxCheckBox.isSelected());
    }//GEN-LAST:event_maxCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bitsCheckBox;
    private javax.swing.JSpinner bitsSpinner;
    private javax.swing.JCheckBox maxCheckBox;
    private javax.swing.JSpinner maxSpinner;
    private javax.swing.JCheckBox minCheckBox;
    private javax.swing.JSpinner minSpinner;
    // End of variables declaration//GEN-END:variables
}
