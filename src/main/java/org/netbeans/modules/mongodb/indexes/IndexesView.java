/*
 * Copyright (C) 2015 Yann D'Isanto
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package org.netbeans.modules.mongodb.indexes;

import com.mongodb.BasicDBObject;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import static javax.swing.Action.SHORT_DESCRIPTION;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import lombok.Getter;
import org.netbeans.modules.mongodb.CollectionInfo;
import org.netbeans.modules.mongodb.DbInfo;
import org.netbeans.modules.mongodb.resources.Images;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 *
 * @author Yann D'Isanto
 */
@TopComponent.Description(
    preferredID = "IndexesView",
    persistenceType = TopComponent.PERSISTENCE_NEVER)
@Messages({
    "# {0} - db name",
    "# {1} - collection name",
    "indexesViewTitle=Indexes of {0}.{1}",
    "ACTION_refresh=Refresh",
    "ACTION_createIndex=Create index",
    "ACTION_dropIndex=Drop index",
    "# {0} - index name",
    "dropIndexConfirmText=Permanently drop ''{0}'' index?"
})
public class IndexesView extends TopComponent {

    private static final long serialVersionUID = 1L;

    private final DefaultListModel<Index> listModel = new DefaultListModel<>();

    /**
     * Creates new form IndexesTopComponent
     */
    public IndexesView(Lookup lookup) {
        super(lookup);
        DbInfo dbInfo = lookup.lookup(DbInfo.class);
        CollectionInfo collectionInfo = lookup.lookup(CollectionInfo.class);
        String title = Bundle.indexesViewTitle(dbInfo.getDbName(), collectionInfo.getName());
        setName(title);
        initComponents();
        indexesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        indexesList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                dropIndexAction.setEnabled(e.getFirstIndex() > -1);
            }
        });
        dropIndexAction.setEnabled(false);
        refreshAction.actionPerformed(null);
    }

    @Getter
    private final Action refreshAction = new RefreshAction();

    @Getter
    private final Action createIndexAction = new CreateIndexAction();

    @Getter
    private final Action dropIndexAction = new DropIndexAction();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        refreshButton = new javax.swing.JButton();
        createIndexButton = new javax.swing.JButton();
        dropIndexButton = new javax.swing.JButton();
        splitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        indexesList = new javax.swing.JList<Index>();
        indexDetailsPanel = new javax.swing.JPanel();

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        refreshButton.setAction(getRefreshAction());
        refreshButton.setFocusable(false);
        refreshButton.setHideActionText(true);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(refreshButton);

        createIndexButton.setAction(getCreateIndexAction());
        createIndexButton.setFocusable(false);
        createIndexButton.setHideActionText(true);
        createIndexButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createIndexButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(createIndexButton);

        dropIndexButton.setAction(getDropIndexAction());
        dropIndexButton.setFocusable(false);
        dropIndexButton.setHideActionText(true);
        dropIndexButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dropIndexButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(dropIndexButton);

        splitPane.setDividerLocation(250);
        splitPane.setResizeWeight(0.7);

        indexesList.setModel(listModel);
        jScrollPane1.setViewportView(indexesList);

        splitPane.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout indexDetailsPanelLayout = new javax.swing.GroupLayout(indexDetailsPanel);
        indexDetailsPanel.setLayout(indexDetailsPanelLayout);
        indexDetailsPanelLayout.setHorizontalGroup(
            indexDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
        );
        indexDetailsPanelLayout.setVerticalGroup(
            indexDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );

        splitPane.setRightComponent(indexDetailsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitPane))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createIndexButton;
    private javax.swing.JButton dropIndexButton;
    private javax.swing.JPanel indexDetailsPanel;
    private javax.swing.JList<Index> indexesList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    private class RefreshAction extends AbstractAction {

        public RefreshAction() {
            super(Bundle.ACTION_refresh(), new ImageIcon(Images.REFRESH_ICON));
            putValue(SHORT_DESCRIPTION, Bundle.ACTION_refresh());
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            DBCollection collection = getLookup().lookup(DBCollection.class);
            List<Index> indexes = new ArrayList<>();
            for (DBObject index : collection.getIndexInfo()) {
                indexes.add(Index.fromDBObject(index));
            }
            Collections.sort(indexes, new IndexComparator());
            indexesList.clearSelection();
            listModel.clear();
            for (Index index : indexes) {
                listModel.addElement(index);
            }
        }

    }

    private class CreateIndexAction extends AbstractAction {

        public CreateIndexAction() {
            super(Bundle.ACTION_createIndex(), new ImageIcon(Images.ADD_DOCUMENT_ICON));
            putValue(SHORT_DESCRIPTION, Bundle.ACTION_createIndex());
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Index index = CreateIndexPanel.showDialog();
            if (index != null) {
            DBCollection collection = getLookup().lookup(DBCollection.class);
                final BasicDBObject keys = new BasicDBObject();
                for (Index.Key key : index.getKeys()) {
                    keys.append(key.getField(), key.getSort().getValue());
                }
                final BasicDBObject options = new BasicDBObject();
                options.append("name", index.getName());
                if (index.isSparse()) {
                    options.append("sparse", true);
                }
                if (index.isUnique()) {
                    options.append("unique", true);
                }
                if (index.isDropDuplicates()) {
                    options.append("dropDups", true);
                }
                collection.createIndex(keys, options);
                listModel.addElement(index); // TODO: handle sort
            }
        }

    }

    private class DropIndexAction extends AbstractAction {

        public DropIndexAction() {
            super(Bundle.ACTION_dropIndex(), new ImageIcon(Images.DELETE_DOCUMENT_ICON));
            putValue(SHORT_DESCRIPTION, Bundle.ACTION_dropIndex());
        }

        @Override
        public void actionPerformed(ActionEvent e) {

            Index index = indexesList.getSelectedValue();
            if (index != null) {
                DBCollection collection = getLookup().lookup(DBCollection.class);
                final Object dlgResult = DialogDisplayer.getDefault().notify(new NotifyDescriptor.Confirmation(
                    Bundle.dropIndexConfirmText(index.getName()),
                    NotifyDescriptor.YES_NO_OPTION));
                if (dlgResult.equals(NotifyDescriptor.OK_OPTION)) {
                    collection.dropIndex(index.getName());
                    listModel.removeElement(index);
                }
            }
        }
    }

}
