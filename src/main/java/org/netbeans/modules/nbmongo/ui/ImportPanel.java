/*
 * The MIT License
 *
 * Copyright 2014 Yann D'Isanto.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.netbeans.modules.nbmongo.ui;

import com.mongodb.DB;
import com.mongodb.DBObject;
import org.netbeans.modules.nbmongo.util.ImportProperties;
import org.netbeans.modules.nbmongo.util.Importer;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.Exceptions;

/**
 *
 * @author Yann D'Isanto
 */
public final class ImportPanel extends javax.swing.JPanel {

    private final DB db;

    private final DialogDescriptor dialogDescriptor;

    private final JTextComponent collectionEditor;
    

    /**
     * Creates new form ExportPanel
     */
    public ImportPanel(DB db) {
        this.db = db;
        dialogDescriptor = new DialogDescriptor(this, "Export");
        initComponents();
        collectionEditor = (JTextComponent) collectionComboBox.getEditor().getEditorComponent();
        dropCheckBox.setVisible(false);
        for (String collection : db.getCollectionNames()) {
            collectionComboBox.addItem(collection);
        }
        DocumentListener documentListener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                computeValidity();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                computeValidity();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                computeValidity();
            }

        };
        fileField.getDocument().addDocumentListener(documentListener);
        collectionEditor.getDocument().addDocumentListener(documentListener);
        computeValidity();
    }

    private void computeValidity() {
        final File file = new File(fileField.getText().trim());
        final String collection = collectionEditor.getText();
        dialogDescriptor.setValid(file.isFile() && collection != null && !collection.trim().isEmpty());
    }

    public static void showDialog(DB db, String collection, DBObject criteria, DBObject projection, DBObject sort) {
        final ImportPanel importPanel = new ImportPanel(db);
        if (collection != null) {
            importPanel.collectionComboBox.setSelectedItem(collection);
        }

        final Object dlgResult = DialogDisplayer.getDefault().notify(importPanel.dialogDescriptor);
        if (dlgResult.equals(NotifyDescriptor.OK_OPTION)) {
            performImport(importPanel);
        }

    }

    private static void performImport(ImportPanel importPanel) {
        final String collection = importPanel.collectionEditor.getText();
        final ImportProperties properties = new ImportProperties(collection)
            .drop(importPanel.dropCheckBox.isSelected());
        final File file = new File(importPanel.fileField.getText().trim());
        try (InputStream input = new FileInputStream(file)) {
            final Reader reader = new InputStreamReader(input, "UTF-8");
            new Importer(importPanel.db, properties, reader).run();
        } catch (UnsupportedEncodingException ex) {
            throw new AssertionError();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        collectionLabel = new javax.swing.JLabel();
        collectionComboBox = new javax.swing.JComboBox<String>();
        dropCheckBox = new javax.swing.JCheckBox();
        fileLabel = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();
        browseFileButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(collectionLabel, org.openide.util.NbBundle.getMessage(ImportPanel.class, "ImportPanel.collectionLabel.text")); // NOI18N

        collectionComboBox.setEditable(true);

        org.openide.awt.Mnemonics.setLocalizedText(dropCheckBox, org.openide.util.NbBundle.getMessage(ImportPanel.class, "ImportPanel.dropCheckBox.text")); // NOI18N
        dropCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        org.openide.awt.Mnemonics.setLocalizedText(fileLabel, org.openide.util.NbBundle.getMessage(ImportPanel.class, "ImportPanel.fileLabel.text")); // NOI18N

        fileField.setEditable(false);
        fileField.setText(org.openide.util.NbBundle.getMessage(ImportPanel.class, "ImportPanel.fileField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseFileButton, org.openide.util.NbBundle.getMessage(ImportPanel.class, "ImportPanel.browseFileButton.text")); // NOI18N
        browseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(collectionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(collectionComboBox, 0, 351, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dropCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseFileButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {collectionLabel, fileLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLabel)
                    .addComponent(fileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(collectionLabel)
                    .addComponent(collectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(dropCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFileButtonActionPerformed
        final File home = new File(System.getProperty("user.home"));
        final File file = new FileChooserBuilder("import-export-filechooser")
            .setTitle("Import documents")
            .setDefaultWorkingDirectory(home)
            .setApproveText("Import")
            .setFileFilter(new JsonFileFilter())
            .showSaveDialog();
        if (file != null) {
            fileField.setText(file.getAbsolutePath());
            final String collectionName = file.getName().replaceAll("\\.json$", "");
            collectionEditor.setText(collectionName);
        }
    }//GEN-LAST:event_browseFileButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseFileButton;
    private javax.swing.JComboBox<String> collectionComboBox;
    private javax.swing.JLabel collectionLabel;
    private javax.swing.JCheckBox dropCheckBox;
    private javax.swing.JTextField fileField;
    private javax.swing.JLabel fileLabel;
    // End of variables declaration//GEN-END:variables
}
